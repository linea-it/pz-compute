#!/usr/bin/env python3
"""Generate photo-z estimate tables from raw data.

Usage:
    rail-estimate [options] [--] <input> <output>
    rail-estimate -h | --help
    rail-estimate --version

Options:
    -h --help   Show help text.
    --version   Show version.
    -a <name>, --algorithm=<name>  Select estimation algorithm
                                   [default: fzboost].
    -b <bins>, --bins=<bins>       Set number of bins (columns) in the resulting
                                   tables [default: 301].
    -g <group>, --group=<group>    For HDF5 input, sets the group name (section)
                                   where input data is stored [default: ]
    -p <file>, --param-file=<file> Extra parameter file for the estimation
                                   algorithm.
    --column-template=<template>   Set the names of the input columns
                                   [default: mag_{band}]
    --column-template-error=<template-error>  Set the names of the input error
                                              columns [default: magerr_{band}]


Available algorithms: bpz, fzboost, tpz"""

from collections import namedtuple
from math import nan
from os.path import splitext

from docopt import docopt
from joblib import parallel_config
from yaml import YAMLError, safe_load

from rail_scripts import (
    VERSION_TEXT,
    abort,
    create_column_mapping_dict,
    error,
    find_estimator_configuration,
    info,
    load_user_params,
)

DEFAULT_ESTIMATOR = "fzboost"

Configuration = namedtuple(
    "Configuration",
    (
        "input",
        "output",
        "estimator",
        "estimator_config",
        "num_bins",
        "hdf5_group",
        "column_template",
        "column_template_error",
        "extra_args",
    ),
)
Context = namedtuple("Context", ("input", "estimator"))


def parse_cmdline():
    args = docopt(__doc__, version=VERSION_TEXT)

    estimator = args["--algorithm"]
    config = find_estimator_configuration(args["--algorithm"])
    hdf5_group = args["--group"]
    column_template = args["--column-template"]
    column_template_error = args["--column-template-error"]
    param_file = args['--param-file']

    try:
        num_bins = int(args["--bins"])
    except ValueError:
        error("Invalid number of bins: %s" % args["--bins"])
        abort()

    extra_args = {}
    if param_file:
        try:
            with open(param_file) as f:
                extra_args = safe_load(f)
        except (OSError, YAMLError) as e:
            error('Error loading parameter file: %s' % e)
            abort()

    info("Estimator algorithm: %s" % estimator)
    info("Configuration file: %s" % config)
    info("Bins: %d" % num_bins)
    info('HDF5 group name: "%s"' % hdf5_group)
    info('Column template for magnitude data: "%s"' % column_template)
    info('Column template for error data: "%s"' % column_template_error)
    info('Extra parameter file: "%s"' % param_file)

    return Configuration(
        input=args["<input>"],
        output=args["<output>"],
        estimator=estimator,
        estimator_config=config,
        num_bins=num_bins,
        hdf5_group=hdf5_group,
        column_template=column_template,
        column_template_error=column_template_error,
        extra_args=extra_args,
    )


def load_slow_modules(estimator):
    global DEF_MAGLIMS, DS, Estimator, TableHandle, RailStage

    from rail.core.common_params import lsst_def_maglims as DEF_MAGLIMS
    from rail.core.data import TableHandle
    from rail.core.stage import RailStage

    if estimator == "bpz":
        try:
            from rail.estimation.algos.bpz_lite import BPZ_lite as Estimator
        except ImportError:
            from rail.estimation.algos.bpz_lite import BPZliteEstimator as Estimator
    elif estimator == "fzboost":
        try:
            from rail.estimation.algos.flexzboost import FZBoost as Estimator
        except ImportError:
            from rail.estimation.algos.flexzboost import FlexZBoostEstimator as Estimator
    elif estimator == 'tpz':
        from rail.estimation.algos.tpz_lite import TPZliteEstimator as Estimator
    else:
        raise ValueError("Invalid estimator identifier: %s" % estimator)

    DS = RailStage.data_store


def setup_estimator(
    output,
    estimator,
    estimator_config,
    column_template,
    column_template_error,
    extra_args,
    hdf5_group="",
    num_bins=301,
):
    all_args = {
            'name': 'estimate',
            'model': estimator_config,
            'output': output,
            'hdf5_groupname': hdf5_group,
            'nzbins': num_bins,
    }

    if estimator == 'tpz':
        all_args['nondetect_val'] = nan

    all_args.update(create_column_mapping_dict(
        column_template, column_template_error, DEF_MAGLIMS
    ))

    all_args.update(load_user_params(Estimator, estimator))

    all_args.update(extra_args)

    estimator = Estimator.make_stage(**all_args)

    return estimator


def load_input(file_name):
    # Work around KeyError exception in DS.read_file() by standardizing the
    # exception to ValueError.
    if not splitext(file_name)[1]:
        raise ValueError(
            "Input file name extension is required but missing: " '"%s"' % file_name
        )

    input = DS.read_file("input", TableHandle, file_name)
    return input


def setup(cfg):
    info("Starting setup.")

    try:
        info("Loading all program modules...")
        load_slow_modules(cfg.estimator)
    except ImportError as err:
        error("Error: unable to import program modules.")
        error(err)
        abort()

    try:
        info("Configuring estimator...")
        estimator = setup_estimator(
            cfg.output,
            cfg.estimator,
            cfg.estimator_config,
            cfg.column_template,
            cfg.column_template_error,
            cfg.extra_args,
            cfg.hdf5_group,
            cfg.num_bins,
        )
    except OSError as err:
        error("Error: unable to load estimator configuration file.")
        error(err)
        abort()

    try:
        info("Loading input file...")
        _input = load_input(cfg.input)
    except ValueError as err:
        error("Error: input file name is invalid.")
        error(err)
        abort()
    except OSError as err:
        error("Error: unable to load input file.")
        error(err)
        abort()

    info("Setup done.")

    return Context(input=_input, estimator=estimator)


def estimate(cfg, ctx):
    info("Starting estimate.")

    with parallel_config(backend='threading', n_jobs=1):
        ctx.estimator.estimate(ctx.input)

    info("Estimate done.")


def main():
    cfg = parse_cmdline()
    ctx = setup(cfg)
    estimate(cfg, ctx)


if __name__ == "__main__":
    main()
