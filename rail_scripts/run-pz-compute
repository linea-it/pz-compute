#!/usr/bin/env python3

'''Run rail-estimate script in parallel using htcondor 
   based on the submission file rail-condor.sub. 

   A template is available in pz-compute repository, at: 
   scheduler_examples/htcondor/rail-condor/rail-condor.sub
   

    Usage:
    
    run-pz-compute [options] [--] <process_id> <comment> 
    run-pz-compute -h | --help
    run-pz-compute --version
                            
    Options:
    -h --help   Show help text.
    --version   Show version.
    -p <process id>, --process_id=<process id> Integer or short string without 
                                               blank spaces to identify the 
                                               process. There is no warranty of
                                               uniqueness, only if in the same 
                                               parent directory. If empty, 
                                               attribute test_x where x is 
                                               incremental integer.
    -c <comment>, --comment=<comment> Long string (enclosed in quotes) with the 
                                      process description. (optional) 

'''

import os
import sys
from datetime import datetime
import argparse
import glob
from rail.core.utils import RAILDIR
#from os.path import splitext
#from rail_scripts import print 


def main(): 
    

    # run setup env 
    # create process dir 
    # create process subdir: input, output, log 
    # call condor_submit (run in background!)
    # get finish time
    # save provenance file 
    # compute total duration 
    # get individual machines times from log file
    # print stats 
    start = datetime.now() # t.time() 
    # Initialize parser
    parser = argparse.ArgumentParser()
    # Adding optional argument
    parser.add_argument("-p", "--process_id", 
                        help = "Integer or short string without blank spaces") 
    parser.add_argument("-c", "--comment", 
                        help = "Comment with process description (enclosed in quotes)") 

    # Read arguments from command line
    args = parser.parse_args()
    print('here0')
    if args.process_id:
        print('here1')
        duplicate_id = os.path.isdir(args.process_id)
        if duplicate_id:
            print(f'Process {args.process_id} already exists!')
            print('Aborting...')
            quit()
    else: 
        print('here2')
        old_process_ids = glob.glob('test_*') 
        if len(old_process_ids)>0:
            print('found duplicate') 
            old_n = []
            for old_process_id in old_process_ids:
                old_n.append(int(old_process_id.split('_')[-1]))
            max_id = max(old_n)
            args.process_id = 'test_'+ str(max_id+1)
        else:
            print('didnt find duplicate')
            args.process_id = 'test_0'
    print('---------------------------------------')
    print(f'Process ID: {args.process_id}')
    print(f'Started at: {start}')
    if not args.comment:
        args.comment = ' --- ' 
    print(f'Description: {args.comment}')
    print('---------------------------------------')
    print()
    process_dir = f'./{args.process_id}' 
    os.system(f'mkdir {process_dir}')
    os.system(f'mkdir {process_dir}/log')
    os.system(f'mkdir {process_dir}/input')
    os.system(f'mkdir {process_dir}/output')
       
    print('Running Photo-z Compute...' )
    os.system('source setup-env')
    #rail_dir = os.getenv('RAILDIR')
    print(RAILDIR) #rail_dir)



    print('Done!' )
    finish = datetime.now() # t.time() 
    print(f'Process finished at: {finish}')
    duration = finish - start 
    print('')
    print(f'Total duration: {duration}')
    print('')
    print(f'Process info saved in process_{args.process_id}.json' )





if __name__ == '__main__': main()


